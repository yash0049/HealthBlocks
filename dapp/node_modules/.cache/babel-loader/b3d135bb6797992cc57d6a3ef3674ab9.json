{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/** @file filter.js\n * @authors:\n *   Jeffrey Wilcke <jeff@ethdev.com>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Marian Oancea <marian@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n *   Gav Wood <g@ethdev.com>\n * @date 2014\n */\nvar formatters = require('./formatters');\n\nvar utils = require('../utils/utils');\n/**\n* Converts a given topic to a hex string, but also allows null values.\n*\n* @param {Mixed} value\n* @return {String}\n*/\n\n\nvar toTopic = function toTopic(value) {\n  if (value === null || typeof value === 'undefined') return null;\n  value = String(value);\n  if (value.indexOf('0x') === 0) return value;else return utils.fromUtf8(value);\n}; /// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones\n/// @param should be string or object\n/// @returns options string or object\n\n\nvar getOptions = function getOptions(options, type) {\n  /*jshint maxcomplexity: 6 */\n  if (utils.isString(options)) {\n    return options;\n  }\n\n  options = options || {};\n\n  switch (type) {\n    case 'eth':\n      // make sure topics, get converted to hex\n      options.topics = options.topics || [];\n      options.topics = options.topics.map(function (topic) {\n        return utils.isArray(topic) ? topic.map(toTopic) : toTopic(topic);\n      });\n      return {\n        topics: options.topics,\n        from: options.from,\n        to: options.to,\n        address: options.address,\n        fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),\n        toBlock: formatters.inputBlockNumberFormatter(options.toBlock)\n      };\n\n    case 'shh':\n      return options;\n  }\n};\n/**\nAdds the callback and sets up the methods, to iterate over the results.\n\n@method getLogsAtStart\n@param {Object} self\n@param {function} callback\n*/\n\n\nvar getLogsAtStart = function getLogsAtStart(self, callback) {\n  // call getFilterLogs for the first watch callback start\n  if (!utils.isString(self.options)) {\n    self.get(function (err, messages) {\n      // don't send all the responses to all the watches again... just to self one\n      if (err) {\n        callback(err);\n      }\n\n      if (utils.isArray(messages)) {\n        messages.forEach(function (message) {\n          callback(null, message);\n        });\n      }\n    });\n  }\n};\n/**\nAdds the callback and sets up the methods, to iterate over the results.\n\n@method pollFilter\n@param {Object} self\n*/\n\n\nvar pollFilter = function pollFilter(self) {\n  var onMessage = function onMessage(error, messages) {\n    if (error) {\n      return self.callbacks.forEach(function (callback) {\n        callback(error);\n      });\n    }\n\n    if (utils.isArray(messages)) {\n      messages.forEach(function (message) {\n        message = self.formatter ? self.formatter(message) : message;\n        self.callbacks.forEach(function (callback) {\n          callback(null, message);\n        });\n      });\n    }\n  };\n\n  self.requestManager.startPolling({\n    method: self.implementation.poll.call,\n    params: [self.filterId]\n  }, self.filterId, onMessage, self.stopWatching.bind(self));\n};\n\nvar Filter = function Filter(options, type, requestManager, methods, formatter, callback, filterCreationErrorCallback) {\n  var self = this;\n  var implementation = {};\n  methods.forEach(function (method) {\n    method.setRequestManager(requestManager);\n    method.attachToObject(implementation);\n  });\n  this.requestManager = requestManager;\n  this.options = getOptions(options, type);\n  this.implementation = implementation;\n  this.filterId = null;\n  this.callbacks = [];\n  this.getLogsCallbacks = [];\n  this.pollFilters = [];\n  this.formatter = formatter;\n  this.implementation.newFilter(this.options, function (error, id) {\n    if (error) {\n      self.callbacks.forEach(function (cb) {\n        cb(error);\n      });\n\n      if (typeof filterCreationErrorCallback === 'function') {\n        filterCreationErrorCallback(error);\n      }\n    } else {\n      self.filterId = id; // check if there are get pending callbacks as a consequence\n      // of calling get() with filterId unassigned.\n\n      self.getLogsCallbacks.forEach(function (cb) {\n        self.get(cb);\n      });\n      self.getLogsCallbacks = []; // get filter logs for the already existing watch calls\n\n      self.callbacks.forEach(function (cb) {\n        getLogsAtStart(self, cb);\n      });\n      if (self.callbacks.length > 0) pollFilter(self); // start to watch immediately\n\n      if (typeof callback === 'function') {\n        return self.watch(callback);\n      }\n    }\n  });\n  return this;\n};\n\nFilter.prototype.watch = function (callback) {\n  this.callbacks.push(callback);\n\n  if (this.filterId) {\n    getLogsAtStart(this, callback);\n    pollFilter(this);\n  }\n\n  return this;\n};\n\nFilter.prototype.stopWatching = function (callback) {\n  this.requestManager.stopPolling(this.filterId);\n  this.callbacks = []; // remove filter async\n\n  if (callback) {\n    this.implementation.uninstallFilter(this.filterId, callback);\n  } else {\n    return this.implementation.uninstallFilter(this.filterId);\n  }\n};\n\nFilter.prototype.get = function (callback) {\n  var self = this;\n\n  if (utils.isFunction(callback)) {\n    if (this.filterId === null) {\n      // If filterId is not set yet, call it back\n      // when newFilter() assigns it.\n      this.getLogsCallbacks.push(callback);\n    } else {\n      this.implementation.getLogs(this.filterId, function (err, res) {\n        if (err) {\n          callback(err);\n        } else {\n          callback(null, res.map(function (log) {\n            return self.formatter ? self.formatter(log) : log;\n          }));\n        }\n      });\n    }\n  } else {\n    if (this.filterId === null) {\n      throw new Error('Filter ID Error: filter().get() can\\'t be chained synchronous, please provide a callback for the get() method.');\n    }\n\n    var logs = this.implementation.getLogs(this.filterId);\n    return logs.map(function (log) {\n      return self.formatter ? self.formatter(log) : log;\n    });\n  }\n\n  return this;\n};\n\nmodule.exports = Filter;","map":null,"metadata":{},"sourceType":"script"}