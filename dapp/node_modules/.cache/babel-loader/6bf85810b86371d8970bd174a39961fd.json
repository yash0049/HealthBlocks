{"ast":null,"code":"var scryptsy = require('scryptsy');\n\nvar scrypt;\nvar isNode = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n\nif (isNode) {\n  var NODE_MIN_VER_WITH_BUILTIN_SCRYPT = '10.5.0';\n  var NODE_MIN_VER_INCOMPAT_SCRYPT_PKG = '12.0.0';\n\n  var semver = require('semver');\n\n  var useNodeBuiltin = isNode && semver.Range('>=' + NODE_MIN_VER_WITH_BUILTIN_SCRYPT).test(process.version);\n\n  var tryScryptPkg = function () {\n    var scryptPkg;\n    return function () {\n      if (scryptPkg !== undefined) {\n        return scryptPkg;\n      }\n\n      try {\n        scryptPkg = function (m) {\n          return require(m);\n        }('scrypt');\n      } catch (e) {\n        if (/was compiled against a different/.test(e.message)) {\n          throw e;\n        }\n\n        scryptPkg = null;\n      }\n\n      return scryptPkg;\n    };\n  }();\n\n  var canImprove = function canImprove(nodeVer) {\n    return 'can improve web3\\'s peformance when running Node.js versions older than ' + nodeVer + ' by installing the (deprecated) scrypt package in your project';\n  };\n\n  if (useNodeBuiltin) {\n    var crypto = require('crypto');\n\n    var fallbackCount = 0;\n\n    scrypt = function scrypt(key, salt, N, r, p, dkLen) {\n      try {\n        return crypto.scryptSync(key, salt, dkLen, {\n          N: N,\n          r: r,\n          p: p\n        });\n      } catch (e) {\n        if (/scrypt:memory limit exceeded/.test(e.message)) {\n          var scryptPkg = tryScryptPkg();\n\n          if (scryptPkg) {\n            return scryptPkg.hashSync(key, {\n              N: N,\n              r: r,\n              p: p\n            }, dkLen, salt);\n          }\n\n          fallbackCount += 1;\n          console.warn('\\x1b[33m%s\\x1b[0m', 'Memory limit exceeded for Node\\'s built-in crypto.scrypt, falling back to scryptsy (times: ' + fallbackCount + '), if this happens frequently you ' + canImprove(NODE_MIN_VER_INCOMPAT_SCRYPT_PKG));\n          return scryptsy(key, salt, N, r, p, dkLen);\n        }\n\n        throw e;\n      }\n    };\n  } else {\n    var scryptPkg = tryScryptPkg();\n\n    if (scryptPkg) {\n      scrypt = function scrypt(key, salt, N, r, p, dkLen) {\n        return scryptPkg.hashSync(key, {\n          N: N,\n          r: r,\n          p: p\n        }, dkLen, salt);\n      };\n    } else {\n      console.warn('\\x1b[33m%s\\x1b[0m', 'You ' + canImprove(NODE_MIN_VER_WITH_BUILTIN_SCRYPT));\n    }\n  }\n}\n\nscrypt = scrypt || scryptsy;\nmodule.exports = scrypt;","map":null,"metadata":{},"sourceType":"script"}