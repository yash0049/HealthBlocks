{"ast":null,"code":"import getLength from './_getLength.js';\nimport isFunction from './isFunction.js';\nimport allKeys from './allKeys.js'; // Since the regular `Object.prototype.toString` type tests don't work for\n// some types in IE 11, we use a fingerprinting heuristic instead, based\n// on the methods. It's not great, but it's the best we got.\n// The fingerprint method lists are defined below.\n\nexport function ie11fingerprint(methods) {\n  var length = getLength(methods);\n  return function (obj) {\n    if (obj == null) return false; // `Map`, `WeakMap` and `Set` have no enumerable keys.\n\n    var keys = allKeys(obj);\n    if (getLength(keys)) return false;\n\n    for (var i = 0; i < length; i++) {\n      if (!isFunction(obj[methods[i]])) return false;\n    } // If we are testing against `WeakMap`, we need to ensure that\n    // `obj` doesn't have a `forEach` method in order to distinguish\n    // it from a regular `Map`.\n\n\n    return methods !== weakMapMethods || !isFunction(obj[forEachName]);\n  };\n} // In the interest of compact minification, we write\n// each string in the fingerprints only once.\n\nvar forEachName = 'forEach',\n    hasName = 'has',\n    commonInit = ['clear', 'delete'],\n    mapTail = ['get', hasName, 'set']; // `Map`, `WeakMap` and `Set` each have slightly different\n// combinations of the above sublists.\n\nexport var mapMethods = commonInit.concat(forEachName, mapTail),\n    weakMapMethods = commonInit.concat(mapTail),\n    setMethods = ['add'].concat(commonInit, forEachName, hasName);","map":null,"metadata":{},"sourceType":"module"}